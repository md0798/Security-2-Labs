# create ca directory
mkdir ca

cd ca

#create certs crl newcerts private
mkdir certs crl newcerts private
#changing permission for private folder
chmod 700 private
#creating index.txt file
touch index.txt
echo 1000 > serial
#creating openssl.cnf file for root certificate
touch openssl.cnf
#configuring openssl.cnf 
echo "[ ca ]
default_ca = CA_default
[ CA_default ]
dir               = /ca
certs             = certs
crl_dir           = crl
new_certs_dir     = newcerts
database          = index.txt
serial            = serial
RANDFILE          = private/.rand

private_key       = private/ca.key.pem
certificate       = certs/ca.cert.pem

# For certificate revocation lists.
crlnumber         = crlnumber
crl               = crl/ca.crl.pem
crl_extensions    = crl_ext
default_crl_days  = 30

# SHA-1 is deprecated, so use SHA-2 instead.
default_md        = sha256

name_opt          = ca_default
cert_opt          = ca_default
default_days      = 375
preserve          = no
policy            = policy_strict

[ policy_strict ]
countryName             = match
stateOrProvinceName     = match
organizationName        = match
organizationalUnitName  = optional
commonName              = supplied
emailAddress            = optional

[ policy_loose ]
countryName             = optional
stateOrProvinceName     = optional
localityName            = optional
organizationName        = optional
organizationalUnitName  = optional
commonName              = supplied
emailAddress            = optional

[ req ]
default_bits        = 2048
distinguished_name  = req_distinguished_name
string_mask         = utf8only

default_md          = sha256

x509_extensions     = v3_ca

[ req_distinguished_name ]
countryName                     = US
stateOrProvinceName             = US
localityName                    = Locality Name
0.organizationName              = MD
organizationalUnitName          = Organizational Unit Name
commonName                      = MD
emailAddress                    = Email Address

countryName_default             = US
stateOrProvinceName_default     = US
localityName_default            =
0.organizationName_default      = MD 
organizationalUnitName_default  =
emailAddress_default            =

[ v3_ca ]
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints = critical, CA:true
keyUsage = critical, digitalSignature, cRLSign, keyCertSign

[ v3_intermediate_ca ]
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints = critical, CA:true, pathlen:0
keyUsage = critical, digitalSignature, cRLSign, keyCertSign

[ usr_cert ]
basicConstraints = CA:FALSE
nsCertType = client, email
nsComment = "OpenSSL Generated Client Certificate"
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer
keyUsage = critical, nonRepudiation, digitalSignature, keyEncipherment
extendedKeyUsage = clientAuth, emailProtection

[ server_cert ]
basicConstraints = CA:FALSE
nsCertType = server
nsComment = "OpenSSL Generated Server Certificate"
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer:always
keyUsage = critical, digitalSignature, keyEncipherment
extendedKeyUsage = serverAuth

[ crl_ext ]
authorityKeyIdentifier=keyid:always

[ ocsp ]
basicConstraints = CA:FALSE
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer
keyUsage = critical, digitalSignature
extendedKeyUsage = critical, OCSPSigning" >> openssl.cnf

#creating key for root ca with "password 0000"
openssl genrsa -aes256 -passout pass:0000 -out private/ca.key.pem 4096


chmod 400 private/ca.key.pem

#creating root certificate
openssl req -config openssl.cnf \
      -key private/ca.key.pem \
      -new -x509 -days 7300 -sha256 -extensions v3_ca \
      -out certs/ca.cert.pem

chmod 444 certs/ca.cert.pem

#verify root certificate
openssl x509 -noout -text -in certs/ca.cert.pem

#creating intermediate directory
mkdir intermediate

cd intermediate

#creating same directories for intermediate as for root
mkdir certs crl csr newcerts private
chmod 700 private
touch index.txt
echo 1000 > serial

echo 1000 > crlnumber
#creating openssl.cnf for intermediate certificate
touch openssl.cnf

echo "[ ca ]
default_ca = CA_default

[ CA_default ]
dir               = ca/intermediate
certs             = certs
crl_dir           = crl
new_certs_dir     = newcerts
database          = index.txt
serial            = serial
RANDFILE          = private/.rand

private_key       = private/intermediate.key.pem
certificate       = certs/intermediate.cert.pem

crlnumber         = crlnumber
crl               = crl/intermediate.crl.pem
crl_extensions    = crl_ext
default_crl_days  = 30

default_md        = sha256

name_opt          = ca_default
cert_opt          = ca_default
default_days      = 375
preserve          = no
policy            = policy_loose

[ policy_strict ]
countryName             = match
stateOrProvinceName     = match
organizationName        = match
organizationalUnitName  = optional
commonName              = supplied
emailAddress            = optional

[ policy_loose ]
countryName             = optional
stateOrProvinceName     = optional
localityName            = optional
organizationName        = optional
organizationalUnitName  = optional
commonName              = supplied
emailAddress            = optional

[ req ]
default_bits        = 2048
distinguished_name  = req_distinguished_name
string_mask         = utf8only

default_md          = sha256

x509_extensions     = v3_ca

[ req_distinguished_name ]
countryName                     = US
stateOrProvinceName             = US
localityName                    = Locality Name
0.organizationName              = MD
organizationalUnitName          = Organizational Unit Name
commonName                      = commonName
emailAddress                    = Email Address

countryName_default             = US
stateOrProvinceName_default     = US
localityName_default            =
0.organizationName_default      = MD 
organizationalUnitName_default  =
emailAddress_default            =

[ v3_ca ]
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints = critical, CA:true
keyUsage = critical, digitalSignature, cRLSign, keyCertSign

[ v3_intermediate_ca ]
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints = critical, CA:true, pathlen:0
keyUsage = critical, digitalSignature, cRLSign, keyCertSign

[ usr_cert ]
basicConstraints = CA:FALSE
nsCertType = client, email
nsComment = "OpenSSL Generated Client Certificate"
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer
keyUsage = critical, nonRepudiation, digitalSignature, keyEncipherment
extendedKeyUsage = clientAuth, emailProtection

[ server_cert ]
basicConstraints = CA:FALSE
nsCertType = server
nsComment = "OpenSSL Generated Server Certificate"
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer:always
keyUsage = critical, digitalSignature, keyEncipherment
extendedKeyUsage = serverAuth

[ crl_ext ]
authorityKeyIdentifier=keyid:always

[ ocsp ]
basicConstraints = CA:FALSE
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer
keyUsage = critical, digitalSignature
extendedKeyUsage = critical, OCSPSigning" >> openssl.cnf

#going back to ca directory
cd ..
#creating key for intermediate certificate with "passpharse 0000"
openssl genrsa -aes256 -passout pass:0000\
      -out intermediate/private/intermediate.key.pem 4096


chmod 400 intermediate/private/intermediate.key.pem

#creating intermediate certificate, common name should be "mpd"
openssl req -config intermediate/openssl.cnf -new -sha256 \
      -key intermediate/private/intermediate.key.pem \
      -out intermediate/csr/intermediate.csr.pem

#signing intermediate certificate with root ca,input y 2 times when asked
openssl ca -config openssl.cnf -extensions v3_intermediate_ca \
      -days 3650 -notext -md sha256 \
      -in intermediate/csr/intermediate.csr.pem \
      -out intermediate/certs/intermediate.cert.pem      
#verify intermediate ca      
openssl x509 -noout -text \
      -in intermediate/certs/intermediate.cert.pem

#verify intermediate certificate against root certificate, should print ok      
openssl verify -CAfile certs/ca.cert.pem \
      intermediate/certs/intermediate.cert.pem

#creating chain file with root and intermediate certificate
cat intermediate/certs/intermediate.cert.pem \
      certs/ca.cert.pem > intermediate/certs/ca-chain.cert.pem


chmod 444 intermediate/certs/ca-chain.cert.pem

#creating key for client certificate without a passphrase
openssl genrsa \
      -out intermediate/private/mpd2155.key.pem 2048


chmod 400 intermediate/private/mpd2155.key.pem

#going into intermediate
cd intermediate

#creating client certificate, common name should be "mpd2155@columbia.edu"
openssl req -config openssl.cnf \
      -key private/mpd2155.key.pem \
      -new -sha256 -out csr/mpd2155.csr.pem

#signing the client certificate using intermediate certificate, input y 2 times when asked  
openssl ca -config openssl.cnf \
      -extensions usr_cert -days 375 -notext -md sha256 \
      -in csr/mpd2155.csr.pem \
      -out certs/mpd2155.cert.pem      
 
  cd ..    
chmod 444 intermediate/certs/mpd2155.cert.pem   

#verifying certificate
openssl x509 -noout -text \
      -in intermediate/certs/mpd2155.cert.pem
           
#verfying certificate against chain file, should print ok      
openssl verify -CAfile intermediate/certs/ca-chain.cert.pem \
      intermediate/certs/mpd2155.cert.pem
      
#generating key for server with out passphrase      
openssl genrsa \
      -out intermediate/private/www.mpd2155.com.key.pem 2048


chmod 400 intermediate/private/www.mpd2155.com.key.pem

cd intermediate

#creating the server certificate common name should be "www.mpd2155.com" 
openssl req -config openssl.cnf \
      -key private/www.mpd2155.com.key.pem \
      -new -sha256 -out csr/www.mpd2155.com.csr.pem

#signing the server certificate using intermediate certificate, input y 2 times when asked   
openssl ca -config openssl.cnf \
      -extensions server_cert -days 375 -notext -md sha256 \
      -in csr/www.mpd2155.com.csr.pem \
      -out certs/www.mpd2155.com.cert.pem      
  cd ..    
  
chmod 444 intermediate/certs/www.mpd2155.com.cert.pem   
#verifying certificate
openssl x509 -noout -text \
      -in intermediate/certs/www.mpd2155.com.cert.pem
      
#verfying certificate against chain file, should print ok       
openssl verify -CAfile intermediate/certs/ca-chain.cert.pem \
      intermediate/certs/www.mpd2155.com.cert.pem
      
